# Git初心者向け運用マニュアル

本マニュアルは、TortoiseSVNに慣れた方向けに、Visual Studio 2022でのGit運用手順をまとめたものです。Azure DevOps Server上のGitリポジトリを対象に、GUIでの操作方法を解説します。

## 1. GitとSVNの基本概念の比較

### 集中型 vs 分散型
- **SVN**: 中央サーバー上のリポジトリでバージョン管理を行う**集中型**システム
- **Git**: 各開発者がリポジトリの完全なコピーを手元に持つ**分散型**システム
- Gitではオフラインでも全履歴を持ったローカルリポジトリで作業可能

### リポジトリの取得
- SVN: **チェックアウト**で作業コピーを取得
- Git: **クローン**でリモートリポジトリの全履歴を含むコピーをローカルに作成

### コミットの扱い
- SVN: コミットすると即座に中央リポジトリに反映
- Git: コミットはローカルリポジトリへの記録のみ。他メンバーと共有するには**プッシュ**が必要
- 細かなコミットを気軽に行え、ローカルで安心して試行錯誤ができる

### ブランチとマージ
- SVN: ブランチ作成・マージに手間がかかる
- Git: ブランチ作成・切り替え・マージが高速かつシンプル
- 実験用ブランチを気軽に作れるため、積極的なブランチ活用が可能

## 2. 「フェッチ」「プル」「プッシュ」の意味と役割

### フェッチ (Fetch)
- リモートの新しいコミットを**ダウンロード**するだけ
- 作業ブランチには反映せず、履歴として受信するのみ
- SVNには相当する操作がない

### プル (Pull)
- リモートからコミットを取得し、現在のブランチに**マージ**
- 「フェッチ＋自動マージ」のセット操作
- SVNの「更新(Update)」に近いが、ローカル履歴にマージコミットが追加される点が異なる
- 同じ箇所を編集していた場合はコンフリクト解決が必要

### プッシュ (Push)
- ローカルのコミット履歴をリモートリポジトリに**送信**
- SVNの「コミット」に相当
- リモートの最新状態を反映していないとエラーになる

### 基本サイクル
「**プル→作業・コミット→プッシュ**」の繰り返し

## 3. 基本のブランチ運用ルール

### mainブランチ
- 製品リリース用のメインブランチ
- 常にリリース可能な安定コードのみを含む
- 直接開発作業は行わない

### developブランチ
- 日常的な開発作業のデフォルトブランチ
- 開発中の最新コードが集約される
- 十分テスト後、mainブランチにマージしてリリース

### bugfixブランチ
- 本番リリース版の緊急バグ修正用
- mainから派生させ、修正完了後mainにマージ
- 同じ修正をdevelopにも適用して修正内容を反映

## 4. ケーススタディ

### 4.1 既存アプリの機能追加（手元にクローンがない場合）

1. **リポジトリのクローン**: VS2022で [Git] → [リポジトリのクローン] を選択
2. **クローン先の指定**: リポジトリURLとローカル保存先を指定
3. **ソリューションのオープン**: `.sln`ファイルを開く
4. **developブランチへ切り替え**: Git画面からdevelopブランチを選択
5. **最新状態の取得**: [Git] → [プル] で最新コードを取得
6. **機能追加の実装**: developブランチ上で機能を実装
7. **ローカルでコミット**: 変更を確認し、メッセージを添えてコミット
8. **リモートへプッシュ**: [プッシュ]ボタンでAzure DevOpsに変更を送信

### 4.2 既存アプリの機能追加（手元にクローンがある場合）

1. **最新コードの取得**: VSでソリューションを開き、developブランチに切り替えてプル
2. **新機能の実装**: 開発作業を行う
3. **コミットとプッシュ**: 変更をコミットし、リモートにプッシュ

### 4.3 バグ修正作業（bugfixブランチの作成〜完了）

1. **mainブランチへ切り替え**: mainブランチをチェックアウト
2. **最新リリース状態の取得**: mainブランチをプル
3. **bugfixブランチの作成**: [新しいブランチの作成]で「bugfix/xxx」名のブランチを作成
4. **バグの修正**: 問題箇所を修正
5. **修正内容をコミット**: 変更をコミット
6. **リモートへプッシュ**: 必要に応じてbugfixブランチをプッシュ
7. **mainブランチへのマージ**: mainをチェックアウトし、bugfixブランチをマージ
8. **mainブランチのプッシュ**: 修正済みmainをリモートにプッシュ
9. **developブランチへの修正反映**: developブランチにもbugfixをマージ
10. **不要ブランチの削除**: 役目を終えたbugfixブランチを削除（任意）

### 4.4 リリース作業（develop → mainへのマージ）

1. **最終確認**: developブランチの内容がリリース可能か確認
2. **mainブランチへの切り替え**: mainブランチをチェックアウト
3. **developブランチのマージ**: developをmainにマージ
4. **リリースコミットの確定**: マージコミットを確定
5. **リモートへのプッシュ**: mainをリモートにプッシュ
6. **タグの作成**: リリースバージョンのタグを付与（任意）
7. **リリースの実施**: ビルド/デプロイプロセスへ
8. **次の開発サイクルへ**: developブランチで次期開発を開始

このマニュアルを参考に、Visual StudioのGUI操作とブランチ運用ルールに慣れれば、Gitでも安心して開発を進められるようになります。
